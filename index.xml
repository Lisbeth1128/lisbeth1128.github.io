<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>小墨的博客</title>
    <link>http://lisbeth1128.github.io//</link>
    <description>Recent content on 小墨的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Thu, 07 Jan 2021 15:56:54 +0800</lastBuildDate>
    
	<atom:link href="http://lisbeth1128.github.io//index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>浅析MVC</title>
      <link>http://lisbeth1128.github.io//posts/%E6%B5%85%E6%9E%90mvc/</link>
      <pubDate>Thu, 07 Jan 2021 15:56:54 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/%E6%B5%85%E6%9E%90mvc/</guid>
      <description>最近学习了 MVC，不得不说，学得感觉脑袋嗡嗡的，一团浆糊。为了能够比较好的理解，还是决定整理一下关于 MVC 的知识，让自己可以更好的理解 MVC。
MVC 三个对象 MVC 是一种设计模式。
 M 是 数据层 Model，是程序需要操作的数据或者信息。  const M = { findAll: &#39;/todos&#39;, findOne: &#39;/todos/{id}&#39;, create: &#39;/todos&#39;, update: &#39;/todos/{id}&#39; destroy : &#39;/todos/{id}&#39; } 所有与数据有关的东西都整合到M里面。
V 是 视图层 View，是提供给用户的操作界面，是程序的外壳。  const V = { el: null, html: `&amp;lt;div class=&amp;quot;html&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;`, render() {} }; 所有与视图相关的东西都放到 V 里面。
C是 控制层 Controller，它负责根据用户从&amp;quot;视图层&amp;quot;输入的指令，选取&amp;quot;数据层&amp;quot;中的数据，然后对其进行相应的操作，产生最终结果。  const C = { init() {}, events: { &amp;quot;click #add1&amp;quot;: &amp;quot;add&amp;quot;, &amp;quot;click #minus1&amp;quot;: &amp;quot;minus&amp;quot;, &amp;quot;click #mul2&amp;quot;: &amp;quot;mul&amp;quot;, &amp;quot;click #divide2&amp;quot;: &amp;quot;div&amp;quot; }, add() {}, minus() {}, mul() {}, div() {} } 所有业务逻辑都放到 C 里面。</description>
    </item>
    
    <item>
      <title>事件委托</title>
      <link>http://lisbeth1128.github.io//posts/%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</link>
      <pubDate>Thu, 10 Dec 2020 02:29:43 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/%E4%BA%8B%E4%BB%B6%E5%A7%94%E6%89%98/</guid>
      <description>之前我们学习了DOM的事件模型，了解到了捕获和冒泡。但是并不知道有什么用途。今天我们要讲它的一个用途，就是可以实现事件委托。 试想一下，如果我们需要对一批元素进行相同的处理。我们就不必要为他们每一个都写程序，我们可以只写一个程序，然后将它绑定在我们需要处理的元素的祖先元素上。
 假设，我们有100个按钮，我们需要为监听他们，我们不可能写100个绑定时间然后分别绑定在这些按钮上。我们可以在按钮的祖先元素上绑定一个事件，然后对其进行监听即可。  const t = e.target if(t.tagName.toLowerCase() === &#39;button&#39;){ console.log(&#39;button 被点击了&#39;) console.log(&#39;button data-id 是&#39;+t.dataset.id) } })``` 2. 再比如，我们如果要监听一个目前还不存在的元素，怎么办。那我们只能监听它的祖先，然后在执行的时候看看是不是我要的那个元素。 ```setTimeout(()=&amp;gt;{ const button = document.createElement(&#39;button&#39;) button.textContent = &#39;click 1&#39; div1.appendChild(button) }, 1000)``` ```div1.addEventListener(&#39;click&#39;, (e)=&amp;gt;{ const t = e.target if(t.tagName.toLowerCase() === &#39;button&#39;){ console.log(&#39;button 被 click 了&#39;) } })``` 这就是事件委托。它有很多优点。 1. 它可以简化初始化，并节省很多的内存。 2. 它可以监听一些动态元素。 3. 代码可以变得更少，添加移除的时候不需要添加移除程序。 大致的概念就是这样，之后还有对事件委托进行封装或者其他处理，之后我有成果了会继续展示。 </description>
    </item>
    
    <item>
      <title>DOM事件模型</title>
      <link>http://lisbeth1128.github.io//posts/dom%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B/</link>
      <pubDate>Thu, 10 Dec 2020 02:28:04 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/dom%E4%BA%8B%E4%BB%B6%E6%A8%A1%E5%9E%8B/</guid>
      <description>今天学习了 DOM 事件模型。这是一个比较重要的概念，我想作为一个新人，如果要真正的消化需要花比较多的一些时间。现在就把脑子里理解到的部分讲一讲。首先我们来看一段代码
&amp;lt;div class=class2&amp;gt; &amp;lt;div class=class3&amp;gt; 文字 &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt;``` 现在在三个div上加上三个监听事件，分别为fn1，fn2，fn3。 假设我现在点击了xxx，触发了三个事件，那么fn1、fn2、fn3这三个事件，先调用谁呢？ 2002年，W3C发布了标准。表示浏览器都应该支持从外到内以及从内到外的调用。顺序是： 从class1=&amp;gt;class2=&amp;gt;class3，然后，再从class3=&amp;gt;class2=&amp;gt;class1。 其中，class1=&amp;gt;class2=&amp;gt;class3的调用顺序，叫做捕获。class3=&amp;gt;class2=&amp;gt;class1的调用顺序，叫做冒泡。 但是这并不代表，你需要在捕获和调用的时候都执行监听函数，这个是你可以选择的。选择自己在捕获阶段或者在冒泡阶段执行监听函数。 我们引入一个DOM函数叫 `addEventListener()`来帮我们实现这个功能。 `xxx.addEventListener(&#39;click&#39;,fn,bool)` 其中，&#39;click&#39;是事件，fn是调用函数，bool可以取两个值，不传就表示取falsy值。 - 如果bool取值为true，那么当浏览器在捕获阶段的时候如果发现有监听函数，就执行。 - 如果bool不取值，或者取为falsy值，那么当浏览器在冒泡阶段的时候如果发现有监听函数，就执行。 这就是一个简单的大致的 DOM 事件模型。</description>
    </item>
    
    <item>
      <title>浅谈jQuery</title>
      <link>http://lisbeth1128.github.io//posts/%E6%B5%85%E8%B0%88jquery/</link>
      <pubDate>Wed, 09 Dec 2020 04:36:37 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/%E6%B5%85%E8%B0%88jquery/</guid>
      <description>最近一直在学习jQuery。虽然现在大部分工作并不对此有要求，但是了解jQuery之后发现，设计得甚是巧妙。作为一个新人，希望在不断学习之后也能写出这么精妙的设计。言归正传，现在来稍微讲讲jQuery的使用方法。
jQuery 如何获取元素 jQuery可以获取到网页的某个元素，然后对其进行操作。它的参数可以是符合css语法的选择器。
 $(&#39;#Id&#39;) 获取到ID为Id的元素 $(&#39;.red&#39;) 获取到class为red的元素 $(&#39;div.red&#39;) 获取到class为red的所有div元素 $(document) 获取到整个文档对象  这比DOM的获取方式简单许多，甚至都不需要写jQuery，直接用$就可以。
jQuery 的链式操作 前面讲到，jQuery设计的一大特点就是，获取到了某个网页元素就可以对它进行操作。并且可以操作一次后继续操作，这就是jQuery的链式操作，比如： $(&#39;#test&#39;).find(&#39;.child&#39;).addClass(&#39;red&#39;) 我们分开来看看
 $(&#39;#test&#39;) 获取到id为test的元素 .find(&#39;.child&#39;) 获取到class为child的元素 .addClass(&#39;red&#39;) 给这些元素加上red这个class 这就是链式操作。因为jQuery每一步操作，返回的都是一个jQuery对象，所以可以连续地进行操作。这也是jQuery的一大设计亮点。  jQuery 如何创建元素 我们使用jQuery构造函数直接创建元素，非常简单 $(&#39;&amp;lt;div&amp;gt;&amp;lt;span&amp;gt;1&amp;lt;/span&amp;gt;&amp;lt;/div&amp;gt;&#39;) 就是创建一个div元素，div里有一个span元素，然后 .appendTo(document.body) 就可以把这个创建出来的元素插入到body里面。
jQuery 如何移动元素 我们可以将某个需要的元素放到另外一个元素的前面，或者后面。
 $(&#39;div&#39;).insertAfter($(&#39;p&#39;)) 在p元素后面插入div元素 $(&#39;p&#39;).after(&#39;div&#39;) 把p元素加到div元素前面 这两种方式效果是一样的，只不过操作的对象不同，所以可以根据自己的需求来选择。  jQuery 如何修改元素的属性  $(&#39;#p&#39;).attr(&#39;class&#39;) 获取id为p的元素的class属性 $(&#39;#p&#39;).attr(&#39;class&#39;,&#39;red&#39;) 如果有第二个参数，就是给p元素的class加一个red属性 这是一个很有意思的例子。因为这是jQuery的一个巧妙的设计。这是一个getter/setter模式。就是指这个函数，既可以读也可以写。 $(&#39;#p&#39;).addClass(&#39;blue&#39;) 给id为p的元素增加一个blue的class属性 $(&#39;#p&#39;).removeClass(&#39;yellow&#39;) 删除id为p的元素的yellow的class属性  jQuery 设计得巧妙的地方还有很多，虽然现在工作中会比较少地提到他，但是它的设计模式还是很值得学习的。希望以后也能写出这么构思巧妙的代码。</description>
    </item>
    
    <item>
      <title>JS函数的执行时机</title>
      <link>http://lisbeth1128.github.io//posts/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</link>
      <pubDate>Fri, 02 Oct 2020 21:45:57 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/js%E5%87%BD%E6%95%B0%E7%9A%84%E6%89%A7%E8%A1%8C%E6%97%B6%E6%9C%BA/</guid>
      <description>今天学习了JS的函数内容。知道每个JS函数都有调用时机。一些简单代码还是比较好理解的，但是如果碰到一些稍微复杂的代码，就需要结合闭包等其他概念来进行理解了。下面看一个例子：
let i = 0 for(i = 0; i &amp;lt; 6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } 这个例子会输出6个6。为什么？ setTimeout()这个函数的意思是过一会儿执行。也就是说，在上面这一段代码里的意思是，过一会儿打印出i的值。但是一共执行了6次，而过一会儿i就变成了6，所以会打印出6个6。但是为什么过一会儿取的是6这个值呢？这就要从如何实现闭包说起了。
JS 的闭包 JS 实现闭包的时候，是capture variable的。意思就是，当一个闭包引用了外部变量，它就把这个变量名记下来，等到需要用到的时候，用这个变量名，去查这个变量值是多少。
其他某些语言的闭包 而有一些语言，是另外一种策略，是capture value的。意思就是，当一个闭包引用了外部变量，当这个闭包创建的那一刻，立刻查询那个外部变量的值是多少。把这个值固化下来。那么在那之后，到下一次闭包建立之前，不管这个外部变量变成了多少，都跟这个闭包无关了。
区别 他们本质上最大的区别，就是这些闭包是否可以通过某一个相同的“变量”来共享状态。capture variable 可以，但是capture value 不行。
所以，我们上面这段代码，就会输出6个6。那么，怎么让它输出0，1，2，3，4，5呢？
方法一 for(let i = 0; i &amp;lt; 6; i++){ setTimeout(()=&amp;gt;{ console.log(i) },0) } 我们只需要将let声明放到里面，那么输出的就是，0，1，2，3，4，5。原因上面已经解释了。
既然如此，我们还有没有其他除了用let+for循环以外的方法让我们得到这个结果呢。
方法二 let i for(i = 0; i&amp;lt;6; i++){ let x = i setTimeout(()=&amp;gt;{ console.log(x) }) } 引入另外一个变量，将i的值赋值给这个变量，之后这个变量值怎么变化就与i之后的变化无关了。
方法三 let i for(i = 0; i&amp;lt;6; i++){ setTimeout((value)=&amp;gt;{ console.</description>
    </item>
    
    <item>
      <title>JS对象基本用法</title>
      <link>http://lisbeth1128.github.io//posts/js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</link>
      <pubDate>Sat, 26 Sep 2020 01:07:48 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/js%E5%AF%B9%E8%B1%A1%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</guid>
      <description>前几天学习了JS的数据类型。今天重点学习了JS数据类型里最重要也是最复杂的类型——对象。
定义 什么是对象？简单说，对象就是一组“键值对”的集合，是一种无序的复合数据集合。
声明对象 那我们怎么声明对象呢？目前有两种方式：
 let object = {&#39;name&#39;: &#39;lisbeth&#39;} 这就是直接将变量声明成了对象的形式。 let object = new Object({&#39;name&#39;: &#39;lisbeth&#39;}) 这是使用Object包装器的方式声明一个新对象。  目前声明对象常用的就是这两种方式。
删除对象的属性 那么我们有了对象之后，怎么删除对象的某些属性呢。
 delete obj.xxx 或者 delete obj[&#39;xxx&#39;] 删除对象obj的xxx属性。 有人使用obj.xxx = undefined来删除obj的xxx属性，这是不正确的。 这只能将obj对象中的xxx属性的值设置为undefined，并没有将这个属性删除。 所以你并不能使用obj.xxx === undefined来判断对象obj是否含有xxx这个属性  查看对象的属性 上面讲了如何删除属性，那么我们怎么查看对象的属性呢。
 查看对象自身的所有属性  Object.keys(obj) 使用这个命令可以查看到对象自身的属性名。 Object.values(obj) 使用这个命令可以查看对象自身的属性值。 Object.entries(obj) 使用这个命令可以同时查看对象自身的键名和属性值。   查看自身加共有属性  console.dir(obj) 这个命令可以查看obj对象的自身属性以及共有属性。    修改或增加对象的属性 可以查看对象属性之后，又怎么修改或者增加对象的属性呢。
 直接赋值 let obj = {name: &#39;jack&#39;} // name 是字符串 obj.</description>
    </item>
    
    <item>
      <title>JS语法</title>
      <link>http://lisbeth1128.github.io//posts/js%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Fri, 25 Sep 2020 12:13:34 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/js%E8%AF%AD%E6%B3%95/</guid>
      <description>前几天学习了JS的历史，了解的JS大概是在怎么样一个环境下产生的。今天学了一点具体的语法，现在来进行一个大概的总结。
JS 版本 前面有讲到，当时为了版权问题，在JavaScript发布标准的时候，使用的ECMAScript这个名字，所以后来的版本标准缩写就是ES。从一开始的EC3到后来的ES6，到现在的ES2019。JS有着比较大的进步，但还有一些历史原因遗留下来的问题，我们需要区别对待。
表达式和语句 这两个概念其实如果仔细较真，比较难以区分。一般来说，表达式基本都有值，语句可能有也可能没有；语句一般会改变环境。但是这两个区分也不是绝对的。事实上，并没有一个详细透彻的解释可能将这两个概念区分得特别清楚。也有很多人认为编程语言区分这两个概念并不是一个很好的主意，而像Lisp语言不区分表达式和语句的语言也有。作为初学者，大概我也就只能理解到这里，深层次的利弊好坏要到以后才能慢慢分析。
标识符 标识符是程序员定义的名称，代表程序的某些元素，如变量之类的。JavaScript语言有这些规定：
 规则  第一个字符，可以是Unicode字母或$或_或中文 后面的字符，除了上面所说的，还可以是数字   变量名是标识符  var _ = 1 var $ = 2 var 你好 = &#39;hi&#39;   一些建议  变量名最好能让人比较直观地看出它的用途 不知道英文的情况下，宁可用中文也不要用拼音    if&amp;hellip;else&amp;hellip; 语句 曾经有个人问过我，他说，你觉得如果要实现一个目标程序，你觉得哪些逻辑是一定不可少的。我想了很久，也不是很确定地说，大概只需要if...else...就行了。
 语法  if(表达式){语句1}else{语句2} {} 语句在里面只有一句的时候可以省略，但还是不建议省略 如果没有{}的情况下，程序自动只会认为后面的第一句是{}里面的 内容   switch —— 一个特殊的if&amp;hellip;else&amp;hellip;  语法    case &amp;quot;banana&amp;quot;: //... break; case &amp;quot;apple&amp;quot; //... break; default: //... }``` - break - 一定不要省略break，break文章后面会提到。 ### while 语句 当你发现，你要不停地成败上次地做判断的时候，你没办法一个一个地去写if.</description>
    </item>
    
    <item>
      <title>JavaScript诞生记</title>
      <link>http://lisbeth1128.github.io//posts/javascript%E8%AF%9E%E7%94%9F%E8%AE%B0/</link>
      <pubDate>Mon, 24 Aug 2020 03:18:04 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/javascript%E8%AF%9E%E7%94%9F%E8%AE%B0/</guid>
      <description>从今天开始起就要开始学习JS了，比起HTML和CSS，JS的学习方法有所不同，更加讲究逻辑。这门语言也有着非常神奇的历史，今天就稍微来说几句。
始于网景  1994年，网景公司发布了Netscape Navigator 0.9 版本，这是世界上第一个比较成熟的网页浏览器。但是呢，这个版本的浏览器只能用来浏览网页。网景预见到网络需要变得更加动态。公司的创始人马克·安德森认为HTML需要一种胶水语言，让网页设计师和兼职程序员可以很容易地使用它来组装图片和插件之类的组件，且代码可以直接编写在网页标记中。 1995年，网景招募了布兰登·艾克，目标是把Scheme语言嵌入到Netscape Navigator浏览器当中。但是在这之前，网景已经在浏览器中支持了Java语言。这时的公司内部发生了分歧。这个时候公司内部需要一个可以运作的原型来支撑他们的理念。所以布莱登花了10天的时间来设计了这门语言。 最初命名为Mocha，1995年9月在Netscape Navigator 2.0的Beta版中改名为LiveScript。同年12月，Netscape Navigator 2.0 Beta 3中部署时被重命名为JavaScript。当时网景公司与昇阳电脑公司组成的开发联盟为了让这门语言搭上Java这个编程语言“热词”，因此将其临时改名为JavaScript，其实它与Java并没有什么关系。 由于设计时间太短，语言的一些细节考虑得不够严谨，导致后来很长一段时间，Javascript写出来的程序混乱不堪。它主要是借鉴的C语言的语法，Java的数据类型和内存管理，Scheme语言的函数为大理念，Self语言的原型继承机制。  十大设计缺陷 因为这是一门花了10天时间就设计出来的语言，它本身存在着非常多的问题。首先设计者当初并不重视它，只是为了完成公司交代的一些要求。他并没有想到之后这门语言会变得应用如此广泛。所以导致了这门语言存在了很多缺陷，这里例举了十大缺陷。
 不适合开发大型程序 标准库很小 null 和 undefined 非常容易混淆 全局变量难以控制，函数内部也能形成 自动插入行尾分号 加号运算符有两个含义，可以表示数字相加，也可以表示字符相连 NaN是一种数字，但是不知道具体设计它的意义是什么 数组和对象难以区分 == 和 === 不一样，推荐用后者 基本类型对应的对象，作用很小，却很容易混淆  总结 JavaScript 的设计缺陷很明显，但是并不妨碍它现在如此的盛行。只要能遵守良好的编程规范，认识到JavaScript的不足，并且用第三方库来加以弥补，就能比较好地使用它。相信未来JavaScript会走的更好。</description>
    </item>
    
    <item>
      <title>浅析URL</title>
      <link>http://lisbeth1128.github.io//posts/%E6%B5%85%E6%9E%90url/</link>
      <pubDate>Wed, 19 Aug 2020 15:55:02 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/%E6%B5%85%E6%9E%90url/</guid>
      <description>今天学习了一点 URL 的小知识，写一篇博客做一个总结归纳。
URL 是什么，包含哪些部分 URL 的全称是Uniform Resource Locator，统一资源定位符，也就是俗称的网址。是李爵士发明用来做网页的地址的。它包含以下这些部分：
 协议  通常浏览网页会用HTTP或者HTTPS协议。 这两个协议规定了请求网页的格式以及相应的格式，为了让大家都能浏览网页。   域名或者IP  就是告诉你你要访问的网址是什么   路径  你要访问的是网址的哪个部分，根目录还是其他目录   查询参数  你要访问的是网址的哪个页面   锚点  你要访问的网址的页面里的某一块    DNS DNS 的全称是Domain Name System，域名系统。他是域名和IP互相映射的一个分布式数据库，能使人更方便地访问互联网。它是怎么运作的呢？ 当你输入一个网址的时候，你的浏览器会向你的运营商提供的DNS服务器询问这个网址对应的IP。怎么询问呢，我们可以用nslookup命令： 打开终端，然后输入nslookup baidu.com。会得到这个结果： 这就是告诉你，baidu.com这个网站对应的IP有两个。分别是39.156.69.79和220.181.38.148。
IP IP 的全称是Internet Protocol，互联网协议。
 主要定义了两件事：  如何定位一台设备 如何封装数据以及和其他设备交流   可以使用ping命令测试网络是否连通  打开终端，输入ping baidu.com。得到结果如下：  表示与这个网站是可以连通的。    域名 域名的全称是Domain Name。因为IP地址太难记，所以就产生了域名这个东西，方便记忆，方便我们随时在浏览器地址栏输入我们熟悉的域名并快速访问。分为，顶级域名，二级域名，三级域名等等：
 .</description>
    </item>
    
    <item>
      <title>CSS知识总结</title>
      <link>http://lisbeth1128.github.io//posts/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 17 Aug 2020 15:49:18 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</guid>
      <description>最近稍微学习了一些 CSS 的基础知识，了解了一个大概。现在对最近学的这些知识做一个梳理总结，加强一下学习的记忆。
CSS 的历史  CSS ，Cascading Style Sheets，层叠样式表。是由李爵士的同事提出的。 层叠的意思。  样式层叠：可以同时对同一选择器做样式声明。 选择器层叠：可以用不同的选择器对同一个元素做样式声明。 文件层叠：可以使用多个CSS文件对同一HTML文件做声明。   CSS 版本 目前运用最广泛的是CSS2.1版本，现在开始已经不是以一整个版本升级了，而是分成各个模块，各个模块自主升级。  文档流  英文是Normal Flow，也就普通流，文档流是中文翻译。简单说指的就是元素按照它在HTML中的位置进行排布的过程。 流动方向。  inline： 元素从左到右，到达最右才会换行。 block：元素从上到下，每一个都另起一行。 inline-block：元素也是从左到右，到达最后换行，但是不会把元素分成两块。    盒模型  content-box：内容盒。content-box的宽度就是内容的宽度。 border-box：边框盒。border-box的宽度是内容的宽度+padding的宽度+border的宽度。  CSS 布局 CSS 目前用的大概是三种布局。
 Float 布局。  子元素上加 float:left; 和 width 父元素上加 .clearfix  .clearfix::after{ content:&#39;&#39;; display: block; clear: both; }  Flex 布局  父元素container的样式  让一个元素变成Flex容器 display: flex | inline-flex; 改变items的流动方向（主轴） flex-direction: row | row-reverse | column | column-reverse; 改变折行 flex-wrap: nowrap | wrap | wrap-reverse; 主轴对齐方式（默认是横轴） justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly 次轴对齐方式（默认是纵轴） align-items: stretch | flex-start | flex-end | center | baseline 多行内容 align-content: flex-start | flex-end | center | stretch | space-betwteen | space-around   子元素items的属性  item 上面加上 order item 上面加上 flex-grow 控制自己长胖 item 上面加上 flex-shrink 控制自己变瘦   Flex 的属性还有很多，用到的时候可以去查询 MDN。   Grid 布局  Grid 也分 container 和 items 成为 container display: grid | inline-grid; 行和列 grid-template-columns: 40px 50px auto 50px 40px; grid-template-raws: 25% 100px auto;      Grid 的属性很多，用法也很灵活，详细可以用的时候再查询，先了解一个大概就行。  CSS 定位 布局是屏幕平面的，定位是垂直于屏幕的。</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>http://lisbeth1128.github.io//posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Fri, 31 Jul 2020 19:57:36 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>今天学习了HTML的几个比较常用，也比较繁琐的标签，现在在这里进行一个总结，以复习巩固知识。
a 标签  定义 a 标签是创建通向其他网页、文件、同一页面的其他位置、电子邮件地址或者其他任意URL的超链接。 属性   href 属性，它的取值有以下几种
 网址：  https://google.com 这个是https协议 http://google.com 这个是http协议 //google.com 这个是无协议网址，它会自动选择是用https还是http协议，所以我们推荐用这种写法   路径：  /a/b/c（绝对路径）和 a/b/c（相对路径）。这里有些不一样的地方，因为http-server在哪里打开，它就会把哪里作为根目录。而如果我们是使用双击去打开这个html文件，那是文件路径，在点超链接的时候，我们会根据文件路径的做法找到文件的根目录去，这样就会出错。所以我们要用http-server来进行模拟测试，而不是用双击打开文件的方式去测试html文件。 index.html 和 ./index.html。这是在当前目录下寻找这个文件，两个意思是一样的。   伪协议：  javascript:代码; 这里的代码为空的话，就是一个点击之后不会有任何反应的按钮，用其他任何办法都不能达到同样的效果。 mailto: 邮件地址 写邮件给邮件地址主人 tel:手机号 打电话给这个手机号   id  href=&amp;rdquo;#id&amp;rdquo; 可以定位到页面中这个id的位置      target 属性，是指在哪个窗口打开这个超链接。它的取值分为以下两种：
   内置名字  _blank：在新标签页打开。 _top：在最顶层页面打开。 _parent：在父级页面打开。 _self：默认值，在当前页面打开。   程序员命名  window的name  target=&amp;quot;xxx&amp;rdquo;，如果有xxx这个窗口，就在xxx窗口打开；如果没有，就创建xxx窗口，然后打开。   iframe的name  如果iframe设置了name属性，那么target设置成这个name，就可以在这个iframe里打开窗口了。        以上就是a标签的基本用法了，还有一些就是不怎么常见了，如果碰到可以查MDN。</description>
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>http://lisbeth1128.github.io//posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Tue, 28 Jul 2020 03:26:22 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</guid>
      <description>今天学习了HTML简单的一些入门内容，现在写成博客整理一下。
 HTML 是谁发明的 HTML 全称 HyperText Markup Language，超文本标记语言。是上个世纪90年代由欧洲核子研究中心的物理学家蒂姆·博纳斯-李（Tim Berners-Lee），也就是我们所说的李爵士发明的。 HTML 的起手式 我用的是VSCode，打开VScode，然后创建一个HTML文件，右下角语言如果不是HTML可以改成HTML。然后输入一个!感叹号，再按Tab键，或者回车键，就会出现一大段代码。 这个就是起手式，每个HTML文件都需要有这么一些基本的设置。然后我们来稍微看看这些设置。  &amp;lt;!DOCTYPE html&amp;gt;文档类型 &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;这是html标签。可以把语言改成zh-CN，这样浏览器会知道这个界面主要用的是什么语言。 一般来说&amp;lt;head&amp;gt;和&amp;lt;body&amp;gt;标签不进行缩进 &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; 文件的字符编码是utf-8，这个一般写在最前面，方便浏览器知道之后的文字用的是什么字符编码。 content=&amp;quot;width=device-width 禁用缩放，兼容手机端。 content=&amp;quot;ie=edge&amp;quot; 告诉IE，使用的是最新的内核。   常用的章节标签 章节标签有很多，挑一些常用地简单说一下。  h1~h6：标题。h1字体最大，往后越来越小。 section：章节。表示用这个标签扩起来的是一个章节，章节可以嵌套章节。 p：段落。表示用这个标签括起来的是一个段落。 header：头部。可以放一些像导航之类的东西。 footer：脚部。版权声明一般放在这里，&amp;amp;copy;这个就是版权符号©的写法。 main：主要内容。这个标签里包括的是主体内容，像导航、侧边栏，版权等的东西不能放在里面。 aside：旁支内容。这个标签里包括的是与主要内容无关的内容，比如侧边栏之类的东西，一般都放在这里。 div：划分。division，应该是这个词的简写。div可以嵌套div。   全局属性 全局属性就是所有标签都有的属性，有这些：  class：class属性可以让一组标签都有同样的属性。 contenteditable：是一个枚举属性，表示元素是否可以被用户编辑。 hidden：hidden是一个布尔属性，表示元素是否隐藏。 id：只有非常确定的唯一的属性用id，作为新手，能不用尽量不用。因为如果你两个元素用了同一个id，浏览器是不会报错的，你没有办法判断你是否只用在了一个元素上。 style：这是元素的属性，所以他的优先级高于css设置的样式，但是可以被javascript所写的属性覆盖。 tabindex：表示元素是否可以聚焦，并且在什么时候参与聚焦。当它是负数的时候，表示可以被聚焦，但是不能通过键盘访问到；当它是0的时候，表示可以被聚焦，并且可以通过键盘访问到。数值越小，越可以先被访问到。通常给予没有鼠标的用户设置这个属性。 title：标题。这个标签只用在&amp;lt;head&amp;gt;块里。表示文档的标题。   常用的内容标签  ol+li：有序列表。 ul+li：无序列表。 dl+dd+dt：表格。 pre：在这个标签里的内容会原封不动地输出到网页中，空格也会一模一样。 hr：水平分割线。 br：换行符。 a：超链接。当你要在一个网页里插入一个链接，就需要用到这个标签。 em：强调。通常显示是斜体，是一个语气上的强调。 strong：强调。通常显示是加粗，这个和em有所不同，他表示的是他扩起来的内容本身就很重要。    这只是刚刚入门了解的一些HTML的标签，还有很多很多东西还没有学习，以后会慢慢深入，初级阶段就先聊到这里。</description>
    </item>
    
    <item>
      <title>使用Hugo搭建个人博客</title>
      <link>http://lisbeth1128.github.io//posts/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 23 Jul 2020 23:49:20 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>今天学习了 Hugo ，据说这是目前世界上最快的博客生成器，是用 Go 语言编写的。学完决定写博客，对这个工具的使用进行一些整理，纯新手，如果说的不对还请见谅。
下载 Hugo 鉴于我使用的是 Mac，我就只讲 Mac 的操作了。 因为之间装了 Homebrew，所以我只需要使用brew install hugo 命令就可以下载 hugo 到电脑上。然后为了确认自己是否已经安装成功，以及想知道 hugo 的版本，就使用hugo version命令，得到一个V开头的数字串就是安装成功了。
搭建博客网站 这个网站的官网有一个官方引导，写得很详细，只要按照它的引导来就行，这里也简单地说一下大概的步骤
 hugo new xxxx xxxx 是新文件夹的名字，因为是作为博客生成器，所以用一个比较有意义的名字，让我们知道这是用来干什么的，所以老师推荐我们用的是 hugo new xxxx.github.io-creator，这里的```xxxx````就是你 github 的用户名了，比较方便。 使用一个主题 先cd 你刚才建的文件夹进入你刚才建的目录里，然后git init，然后使用官网给的示例主题git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke，可能会有点慢。最后，使用echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml命令，将这个主题名字写入到配置文件中。 创建第一篇博客 搞定以上步骤之后，就可以创建我们的第一篇博客了，使用hugo new posts/xxxx.md命令，这里的xxxx就是你的第一篇博客的名字。然后使用你自己的编辑器打开这个文件进行编辑。需要注意的是，打开之后，它文件里原先有的东西，先不要动。另起一行，写下你的第一篇博客。然后回到文件顶部，有一个设置draft: true，将它改成false，意思就是可以发布让别人看到了。  预览网站 已经写完了博客，那接下来我们需要看一下它的效果。
 使用命令hugo server -D来预览你写好的博客网站，看看有没有哪里不对，可以再回去更改。 如果博客是用中文居多的话，我们还需要用编辑器打开config.toml，对其中的东西进行修改。将languageCode = &amp;quot;en-us&amp;quot;中得en-us改成zh-Hans。 没有什么问题的话，就可以生成第一篇博客了。使用hugo -D命令，就会在当前目录下生成一个public文件夹，第一篇博客里的东西都在里面。  上传到 GitHub 上 这里我们需要注意一些事，首先就是，我们要把发布的博客和博客生成器分开。分别要有两个仓库，一个用来放博客生成器，另一个用来放你的博客。
 为了不将public文件夹里的东西和博客生成器里的东西混淆，我们在博客生成器目录里新建一个.</description>
    </item>
    
    <item>
      <title>第二篇博客</title>
      <link>http://lisbeth1128.github.io//posts/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Mon, 20 Jul 2020 22:52:20 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <description>第二篇博客 这是第二篇博客的测试。</description>
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>http://lisbeth1128.github.io//posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Mon, 20 Jul 2020 13:11:02 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description>我的博客测试 测试一下hugo的效果。</description>
    </item>
    
  </channel>
</rss>