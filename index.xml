<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>小墨的博客</title>
    <link>http://lisbeth1128.github.io//</link>
    <description>Recent content on 小墨的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <lastBuildDate>Fri, 25 Sep 2020 12:13:34 +0800</lastBuildDate>
    
	<atom:link href="http://lisbeth1128.github.io//index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JS语法</title>
      <link>http://lisbeth1128.github.io//posts/js%E8%AF%AD%E6%B3%95/</link>
      <pubDate>Fri, 25 Sep 2020 12:13:34 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/js%E8%AF%AD%E6%B3%95/</guid>
      <description>前几天学习了JS的历史，了解的JS大概是在怎么样一个环境下产生的。今天学了一点具体的语法，现在来进行一个大概的总结。
JS 版本 前面有讲到，当时为了版权问题，在JavaScript发布标准的时候，使用的ECMAScript这个名字，所以后来的版本标准缩写就是ES。从一开始的EC3到后来的ES6，到现在的ES2019。JS有着比较大的进步，但还有一些历史原因遗留下来的问题，我们需要区别对待。
表达式和语句 这两个概念其实如果仔细较真，比较难以区分。一般来说，表达式基本都有值，语句可能有也可能没有；语句一般会改变环境。但是这两个区分也不是绝对的。事实上，并没有一个详细透彻的解释可能将这两个概念区分得特别清楚。也有很多人认为编程语言区分这两个概念并不是一个很好的主意，而像Lisp语言不区分表达式和语句的语言也有。作为初学者，大概我也就只能理解到这里，深层次的利弊好坏要到以后才能慢慢分析。
标识符 标识符是程序员定义的名称，代表程序的某些元素，如变量之类的。JavaScript语言有这些规定：
 规则  第一个字符，可以是Unicode字母或$或_或中文 后面的字符，除了上面所说的，还可以是数字   变量名是标识符  var _ = 1 var $ = 2 var 你好 = &#39;hi&#39;   一些建议  变量名最好能让人比较直观地看出它的用途 不知道英文的情况下，宁可用中文也不要用拼音    if&amp;hellip;else&amp;hellip; 语句 曾经有个人问过我，他说，你觉得如果要实现一个目标程序，你觉得哪些逻辑是一定不可少的。我想了很久，也不是很确定地说，大概只需要if...else...就行了。
 语法  if(表达式){语句1}else{语句2} {} 语句在里面只有一句的时候可以省略，但还是不建议省略 如果没有{}的情况下，程序自动只会认为后面的第一句是{}里面的 内容   switch —— 一个特殊的if&amp;hellip;else&amp;hellip;  语法    case &amp;quot;banana&amp;quot;: //... break; case &amp;quot;apple&amp;quot; //... break; default: //... }``` - break - 一定不要省略break，break文章后面会提到。 ### while 语句 当你发现，你要不停地成败上次地做判断的时候，你没办法一个一个地去写if.</description>
    </item>
    
    <item>
      <title>JavaScript诞生记</title>
      <link>http://lisbeth1128.github.io//posts/javascript%E8%AF%9E%E7%94%9F%E8%AE%B0/</link>
      <pubDate>Mon, 24 Aug 2020 03:18:04 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/javascript%E8%AF%9E%E7%94%9F%E8%AE%B0/</guid>
      <description>从今天开始起就要开始学习JS了，比起HTML和CSS，JS的学习方法有所不同，更加讲究逻辑。这门语言也有着非常神奇的历史，今天就稍微来说几句。
始于网景  1994年，网景公司发布了Netscape Navigator 0.9 版本，这是世界上第一个比较成熟的网页浏览器。但是呢，这个版本的浏览器只能用来浏览网页。网景预见到网络需要变得更加动态。公司的创始人马克·安德森认为HTML需要一种胶水语言，让网页设计师和兼职程序员可以很容易地使用它来组装图片和插件之类的组件，且代码可以直接编写在网页标记中。 1995年，网景招募了布兰登·艾克，目标是把Scheme语言嵌入到Netscape Navigator浏览器当中。但是在这之前，网景已经在浏览器中支持了Java语言。这时的公司内部发生了分歧。这个时候公司内部需要一个可以运作的原型来支撑他们的理念。所以布莱登花了10天的时间来设计了这门语言。 最初命名为Mocha，1995年9月在Netscape Navigator 2.0的Beta版中改名为LiveScript。同年12月，Netscape Navigator 2.0 Beta 3中部署时被重命名为JavaScript。当时网景公司与昇阳电脑公司组成的开发联盟为了让这门语言搭上Java这个编程语言“热词”，因此将其临时改名为JavaScript，其实它与Java并没有什么关系。 由于设计时间太短，语言的一些细节考虑得不够严谨，导致后来很长一段时间，Javascript写出来的程序混乱不堪。它主要是借鉴的C语言的语法，Java的数据类型和内存管理，Scheme语言的函数为大理念，Self语言的原型继承机制。  十大设计缺陷 因为这是一门花了10天时间就设计出来的语言，它本身存在着非常多的问题。首先设计者当初并不重视它，只是为了完成公司交代的一些要求。他并没有想到之后这门语言会变得应用如此广泛。所以导致了这门语言存在了很多缺陷，这里例举了十大缺陷。
 不适合开发大型程序 标准库很小 null 和 undefined 非常容易混淆 全局变量难以控制，函数内部也能形成 自动插入行尾分号 加号运算符有两个含义，可以表示数字相加，也可以表示字符相连 NaN是一种数字，但是不知道具体设计它的意义是什么 数组和对象难以区分 == 和 === 不一样，推荐用后者 基本类型对应的对象，作用很小，却很容易混淆  总结 JavaScript 的设计缺陷很明显，但是并不妨碍它现在如此的盛行。只要能遵守良好的编程规范，认识到JavaScript的不足，并且用第三方库来加以弥补，就能比较好地使用它。相信未来JavaScript会走的更好。</description>
    </item>
    
    <item>
      <title>浅析URL</title>
      <link>http://lisbeth1128.github.io//posts/%E6%B5%85%E6%9E%90url/</link>
      <pubDate>Wed, 19 Aug 2020 15:55:02 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/%E6%B5%85%E6%9E%90url/</guid>
      <description>今天学习了一点 URL 的小知识，写一篇博客做一个总结归纳。
URL 是什么，包含哪些部分 URL 的全称是Uniform Resource Locator，统一资源定位符，也就是俗称的网址。是李爵士发明用来做网页的地址的。它包含以下这些部分：
 协议  通常浏览网页会用HTTP或者HTTPS协议。 这两个协议规定了请求网页的格式以及相应的格式，为了让大家都能浏览网页。   域名或者IP  就是告诉你你要访问的网址是什么   路径  你要访问的是网址的哪个部分，根目录还是其他目录   查询参数  你要访问的是网址的哪个页面   锚点  你要访问的网址的页面里的某一块    DNS DNS 的全称是Domain Name System，域名系统。他是域名和IP互相映射的一个分布式数据库，能使人更方便地访问互联网。它是怎么运作的呢？ 当你输入一个网址的时候，你的浏览器会向你的运营商提供的DNS服务器询问这个网址对应的IP。怎么询问呢，我们可以用nslookup命令： 打开终端，然后输入nslookup baidu.com。会得到这个结果： 这就是告诉你，baidu.com这个网站对应的IP有两个。分别是39.156.69.79和220.181.38.148。
IP IP 的全称是Internet Protocol，互联网协议。
 主要定义了两件事：  如何定位一台设备 如何封装数据以及和其他设备交流   可以使用ping命令测试网络是否连通  打开终端，输入ping baidu.com。得到结果如下：  表示与这个网站是可以连通的。    域名 域名的全称是Domain Name。因为IP地址太难记，所以就产生了域名这个东西，方便记忆，方便我们随时在浏览器地址栏输入我们熟悉的域名并快速访问。分为，顶级域名，二级域名，三级域名等等：
 .</description>
    </item>
    
    <item>
      <title>CSS知识总结</title>
      <link>http://lisbeth1128.github.io//posts/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</link>
      <pubDate>Mon, 17 Aug 2020 15:49:18 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/css%E7%9F%A5%E8%AF%86%E6%80%BB%E7%BB%93/</guid>
      <description>最近稍微学习了一些 CSS 的基础知识，了解了一个大概。现在对最近学的这些知识做一个梳理总结，加强一下学习的记忆。
CSS 的历史  CSS ，Cascading Style Sheets，层叠样式表。是由李爵士的同事提出的。 层叠的意思。  样式层叠：可以同时对同一选择器做样式声明。 选择器层叠：可以用不同的选择器对同一个元素做样式声明。 文件层叠：可以使用多个CSS文件对同一HTML文件做声明。   CSS 版本 目前运用最广泛的是CSS2.1版本，现在开始已经不是以一整个版本升级了，而是分成各个模块，各个模块自主升级。  文档流  英文是Normal Flow，也就普通流，文档流是中文翻译。简单说指的就是元素按照它在HTML中的位置进行排布的过程。 流动方向。  inline： 元素从左到右，到达最右才会换行。 block：元素从上到下，每一个都另起一行。 inline-block：元素也是从左到右，到达最后换行，但是不会把元素分成两块。    盒模型  content-box：内容盒。content-box的宽度就是内容的宽度。 border-box：边框盒。border-box的宽度是内容的宽度+padding的宽度+border的宽度。  CSS 布局 CSS 目前用的大概是三种布局。
 Float 布局。  子元素上加 float:left; 和 width 父元素上加 .clearfix  .clearfix::after{ content:&#39;&#39;; display: block; clear: both; }  Flex 布局  父元素container的样式  让一个元素变成Flex容器 display: flex | inline-flex; 改变items的流动方向（主轴） flex-direction: row | row-reverse | column | column-reverse; 改变折行 flex-wrap: nowrap | wrap | wrap-reverse; 主轴对齐方式（默认是横轴） justify-content: flex-start | flex-end | center | space-between | space-around | space-evenly 次轴对齐方式（默认是纵轴） align-items: stretch | flex-start | flex-end | center | baseline 多行内容 align-content: flex-start | flex-end | center | stretch | space-betwteen | space-around   子元素items的属性  item 上面加上 order item 上面加上 flex-grow 控制自己长胖 item 上面加上 flex-shrink 控制自己变瘦   Flex 的属性还有很多，用到的时候可以去查询 MDN。   Grid 布局  Grid 也分 container 和 items 成为 container display: grid | inline-grid; 行和列 grid-template-columns: 40px 50px auto 50px 40px; grid-template-raws: 25% 100px auto;      Grid 的属性很多，用法也很灵活，详细可以用的时候再查询，先了解一个大概就行。  CSS 定位 布局是屏幕平面的，定位是垂直于屏幕的。</description>
    </item>
    
    <item>
      <title>HTML常用标签</title>
      <link>http://lisbeth1128.github.io//posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</link>
      <pubDate>Fri, 31 Jul 2020 19:57:36 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/html%E5%B8%B8%E7%94%A8%E6%A0%87%E7%AD%BE/</guid>
      <description>今天学习了HTML的几个比较常用，也比较繁琐的标签，现在在这里进行一个总结，以复习巩固知识。
a 标签  定义 a 标签是创建通向其他网页、文件、同一页面的其他位置、电子邮件地址或者其他任意URL的超链接。 属性   href 属性，它的取值有以下几种
 网址：  https://google.com 这个是https协议 http://google.com 这个是http协议 //google.com 这个是无协议网址，它会自动选择是用https还是http协议，所以我们推荐用这种写法   路径：  /a/b/c（绝对路径）和 a/b/c（相对路径）。这里有些不一样的地方，因为http-server在哪里打开，它就会把哪里作为根目录。而如果我们是使用双击去打开这个html文件，那是文件路径，在点超链接的时候，我们会根据文件路径的做法找到文件的根目录去，这样就会出错。所以我们要用http-server来进行模拟测试，而不是用双击打开文件的方式去测试html文件。 index.html 和 ./index.html。这是在当前目录下寻找这个文件，两个意思是一样的。   伪协议：  javascript:代码; 这里的代码为空的话，就是一个点击之后不会有任何反应的按钮，用其他任何办法都不能达到同样的效果。 mailto: 邮件地址 写邮件给邮件地址主人 tel:手机号 打电话给这个手机号   id  href=&amp;rdquo;#id&amp;rdquo; 可以定位到页面中这个id的位置      target 属性，是指在哪个窗口打开这个超链接。它的取值分为以下两种：
   内置名字  _blank：在新标签页打开。 _top：在最顶层页面打开。 _parent：在父级页面打开。 _self：默认值，在当前页面打开。   程序员命名  window的name  target=&amp;quot;xxx&amp;rdquo;，如果有xxx这个窗口，就在xxx窗口打开；如果没有，就创建xxx窗口，然后打开。   iframe的name  如果iframe设置了name属性，那么target设置成这个name，就可以在这个iframe里打开窗口了。        以上就是a标签的基本用法了，还有一些就是不怎么常见了，如果碰到可以查MDN。</description>
    </item>
    
    <item>
      <title>HTML入门笔记1</title>
      <link>http://lisbeth1128.github.io//posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</link>
      <pubDate>Tue, 28 Jul 2020 03:26:22 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/html%E5%85%A5%E9%97%A8%E7%AC%94%E8%AE%B01/</guid>
      <description>今天学习了HTML简单的一些入门内容，现在写成博客整理一下。
 HTML 是谁发明的 HTML 全称 HyperText Markup Language，超文本标记语言。是上个世纪90年代由欧洲核子研究中心的物理学家蒂姆·博纳斯-李（Tim Berners-Lee），也就是我们所说的李爵士发明的。 HTML 的起手式 我用的是VSCode，打开VScode，然后创建一个HTML文件，右下角语言如果不是HTML可以改成HTML。然后输入一个!感叹号，再按Tab键，或者回车键，就会出现一大段代码。 这个就是起手式，每个HTML文件都需要有这么一些基本的设置。然后我们来稍微看看这些设置。  &amp;lt;!DOCTYPE html&amp;gt;文档类型 &amp;lt;html lang=&amp;quot;en&amp;quot;&amp;gt;这是html标签。可以把语言改成zh-CN，这样浏览器会知道这个界面主要用的是什么语言。 一般来说&amp;lt;head&amp;gt;和&amp;lt;body&amp;gt;标签不进行缩进 &amp;lt;meta charset=&amp;quot;UTF-8&amp;quot;&amp;gt; 文件的字符编码是utf-8，这个一般写在最前面，方便浏览器知道之后的文字用的是什么字符编码。 content=&amp;quot;width=device-width 禁用缩放，兼容手机端。 content=&amp;quot;ie=edge&amp;quot; 告诉IE，使用的是最新的内核。   常用的章节标签 章节标签有很多，挑一些常用地简单说一下。  h1~h6：标题。h1字体最大，往后越来越小。 section：章节。表示用这个标签扩起来的是一个章节，章节可以嵌套章节。 p：段落。表示用这个标签括起来的是一个段落。 header：头部。可以放一些像导航之类的东西。 footer：脚部。版权声明一般放在这里，&amp;amp;copy;这个就是版权符号©的写法。 main：主要内容。这个标签里包括的是主体内容，像导航、侧边栏，版权等的东西不能放在里面。 aside：旁支内容。这个标签里包括的是与主要内容无关的内容，比如侧边栏之类的东西，一般都放在这里。 div：划分。division，应该是这个词的简写。div可以嵌套div。   全局属性 全局属性就是所有标签都有的属性，有这些：  class：class属性可以让一组标签都有同样的属性。 contenteditable：是一个枚举属性，表示元素是否可以被用户编辑。 hidden：hidden是一个布尔属性，表示元素是否隐藏。 id：只有非常确定的唯一的属性用id，作为新手，能不用尽量不用。因为如果你两个元素用了同一个id，浏览器是不会报错的，你没有办法判断你是否只用在了一个元素上。 style：这是元素的属性，所以他的优先级高于css设置的样式，但是可以被javascript所写的属性覆盖。 tabindex：表示元素是否可以聚焦，并且在什么时候参与聚焦。当它是负数的时候，表示可以被聚焦，但是不能通过键盘访问到；当它是0的时候，表示可以被聚焦，并且可以通过键盘访问到。数值越小，越可以先被访问到。通常给予没有鼠标的用户设置这个属性。 title：标题。这个标签只用在&amp;lt;head&amp;gt;块里。表示文档的标题。   常用的内容标签  ol+li：有序列表。 ul+li：无序列表。 dl+dd+dt：表格。 pre：在这个标签里的内容会原封不动地输出到网页中，空格也会一模一样。 hr：水平分割线。 br：换行符。 a：超链接。当你要在一个网页里插入一个链接，就需要用到这个标签。 em：强调。通常显示是斜体，是一个语气上的强调。 strong：强调。通常显示是加粗，这个和em有所不同，他表示的是他扩起来的内容本身就很重要。    这只是刚刚入门了解的一些HTML的标签，还有很多很多东西还没有学习，以后会慢慢深入，初级阶段就先聊到这里。</description>
    </item>
    
    <item>
      <title>使用Hugo搭建个人博客</title>
      <link>http://lisbeth1128.github.io//posts/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Thu, 23 Jul 2020 23:49:20 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/%E4%BD%BF%E7%94%A8hugo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</guid>
      <description>今天学习了 Hugo ，据说这是目前世界上最快的博客生成器，是用 Go 语言编写的。学完决定写博客，对这个工具的使用进行一些整理，纯新手，如果说的不对还请见谅。
下载 Hugo 鉴于我使用的是 Mac，我就只讲 Mac 的操作了。 因为之间装了 Homebrew，所以我只需要使用brew install hugo 命令就可以下载 hugo 到电脑上。然后为了确认自己是否已经安装成功，以及想知道 hugo 的版本，就使用hugo version命令，得到一个V开头的数字串就是安装成功了。
搭建博客网站 这个网站的官网有一个官方引导，写得很详细，只要按照它的引导来就行，这里也简单地说一下大概的步骤
 hugo new xxxx xxxx 是新文件夹的名字，因为是作为博客生成器，所以用一个比较有意义的名字，让我们知道这是用来干什么的，所以老师推荐我们用的是 hugo new xxxx.github.io-creator，这里的```xxxx````就是你 github 的用户名了，比较方便。 使用一个主题 先cd 你刚才建的文件夹进入你刚才建的目录里，然后git init，然后使用官网给的示例主题git submodule add https://github.com/budparr/gohugo-theme-ananke.git themes/ananke，可能会有点慢。最后，使用echo &#39;theme = &amp;quot;ananke&amp;quot;&#39; &amp;gt;&amp;gt; config.toml命令，将这个主题名字写入到配置文件中。 创建第一篇博客 搞定以上步骤之后，就可以创建我们的第一篇博客了，使用hugo new posts/xxxx.md命令，这里的xxxx就是你的第一篇博客的名字。然后使用你自己的编辑器打开这个文件进行编辑。需要注意的是，打开之后，它文件里原先有的东西，先不要动。另起一行，写下你的第一篇博客。然后回到文件顶部，有一个设置draft: true，将它改成false，意思就是可以发布让别人看到了。  预览网站 已经写完了博客，那接下来我们需要看一下它的效果。
 使用命令hugo server -D来预览你写好的博客网站，看看有没有哪里不对，可以再回去更改。 如果博客是用中文居多的话，我们还需要用编辑器打开config.toml，对其中的东西进行修改。将languageCode = &amp;quot;en-us&amp;quot;中得en-us改成zh-Hans。 没有什么问题的话，就可以生成第一篇博客了。使用hugo -D命令，就会在当前目录下生成一个public文件夹，第一篇博客里的东西都在里面。  上传到 GitHub 上 这里我们需要注意一些事，首先就是，我们要把发布的博客和博客生成器分开。分别要有两个仓库，一个用来放博客生成器，另一个用来放你的博客。
 为了不将public文件夹里的东西和博客生成器里的东西混淆，我们在博客生成器目录里新建一个.</description>
    </item>
    
    <item>
      <title>第二篇博客</title>
      <link>http://lisbeth1128.github.io//posts/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</link>
      <pubDate>Mon, 20 Jul 2020 22:52:20 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/%E7%AC%AC%E4%BA%8C%E7%AF%87%E5%8D%9A%E5%AE%A2/</guid>
      <description>第二篇博客 这是第二篇博客的测试。</description>
    </item>
    
    <item>
      <title>开博大吉</title>
      <link>http://lisbeth1128.github.io//posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</link>
      <pubDate>Mon, 20 Jul 2020 13:11:02 +0800</pubDate>
      
      <guid>http://lisbeth1128.github.io//posts/%E5%BC%80%E5%8D%9A%E5%A4%A7%E5%90%89/</guid>
      <description>我的博客测试 测试一下hugo的效果。</description>
    </item>
    
  </channel>
</rss>